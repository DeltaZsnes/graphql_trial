type Query {
	course(
		eq: [CourseInInput!]
		nq: [CourseInInput!]
		lt: [CourseInInput!]
		le: [CourseInInput!]
		gt: [CourseInInput!]
		ge: [CourseInInput!]
		search: [String!]
		sort: [CourseSort!]
		skip: Int
		take: Int
	): CoursePage!
}

type Course {
	id: Int!
	title: String
	author: String
	topic: String
	url: String
	description: String
}

interface Page {
	skip: Int
	take: Int
	hits: Int
}

type CoursePage implements Page {
	skip: Int
	take: Int
	hits: Int
	data: [Course!]!
}

input CourseSort {
	property: CourseKey
	direction: Boolean
}

input AB {
	A: CourseKey!
	B: String
}

input CourseInInput {
	A: CourseKey!
	B: [String]
}

enum CourseKey {
	id
	title
	author
	topic
	url
}
