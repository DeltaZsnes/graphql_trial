type Query {
	course(
		paging: Paging
		filter: CourseFilter
		sort: [CourseSort!]
	): CoursePage!
}

type Course {
	id: Int!
	title: String
	author: String
	topic: String
	url: String
	description: String
}

interface Page {
	skip: Int
	take: Int
	hits: Int
}

type CoursePage implements Page {
	skip: Int
	take: Int
	hits: Int
	data: [Course!]!
}

input Paging {
	skip: Int!
	take: Int!
}

input CourseFilter {
	eq: [AB!]
	nq: [AB!]
	lt: [AB!]
	le: [AB!]
	gt: [AB!]
	ge: [AB!]
	in: [CourseInInput!]
	sq: [String!]
}

input CourseSort {
	property: CourseKey
	direction: Boolean
}

input AB {
	A: CourseKey!
	B: String
}

input CourseInInput {
	A: CourseKey!
	B: [String]
}

enum CourseKey {
	id
	title
	author
	topic
	url
}
